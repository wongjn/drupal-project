/**
 * @file
 * Layout items in a grid.
 */

@use '../lib/hacks';
@use '../lib/layout';
@use '../lib/viewport';

@mixin _variants($gutter, $container-width, $columns) {
  @at-root {
    @each $name, $column in $columns {
      #{if("#{&}" == '.l-grid', '', &)}.l-grid--#{$name} {
        // Exact width
        $width: layout.column-width($column, $gutter, $container-width);
        // Min-width for grid to be at the desired column count at full site width
        $min-width: (layout.column-width($column + 1, $gutter, $container-width) + 1px);

        --column-min-width: #{$min-width};
        --column-width: #{$width};

        // Fix overflowing grid areas on narrow viewports.
        @media (max-width: #{$min-width + ($gutter * 2)}) {
          grid-template-columns: 1fr;
        }

        > .l-grid__item {
          flex-basis: $width;
        }
      }
    }
  }
}

.l-grid {
  // Spacing between items.
  $gutter: 40px;

  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin: ($gutter * -0.5);
  margin: calc(var(--gutter-y) * -0.5) calc(var(--gutter-x) * -0.5);
  --gutter-x: #{$gutter};
  --gutter-y: #{$gutter};

  @supports (display: grid) {
    display: grid;
    margin: 0;
    grid-template-columns: repeat(auto-fill, minmax(var(--column-min-width), 1fr));
    grid-gap: var(--gutter-y) var(--gutter-x);
  }

  @include _variants($gutter, layout.$SITE_WIDTH_PX, (
    // thirds: 3,
    // quarters: 4,
    // sixths: 6,
  ));

  // 1. When using fallback flexbox layout, ensures items are contained within
  //    the containing element.
  &__item {
    margin: ($gutter * 0.5);
    margin: calc(var(--gutter-y) * 0.5) calc(var(--gutter-x) * 0.5);
    min-width: 0; // 1

    @supports (display: grid) {
      margin: 0;
    }
  }
}
