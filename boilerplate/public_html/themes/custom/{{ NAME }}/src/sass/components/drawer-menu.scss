/**
 * Off-canvas drawer menu.
 */

@use '../lib/unit';
@use '../lib/easing';
@use '../lib/font';

.c-drawer-menu {
  $title-size: unit.px-to-rem(48);
  $title-padding: 2rem;

  $animation_duration_base: 350ms;
  $animation_delay-title: $animation_duration_base * 0.6;
  $animation_delay-menu: $animation_duration_base;

  display: flex;
  flex-direction: column;
  position: fixed;
  top: 0;
  left: 0;
  z-index: 500;
  background-color: #fff;
  transition-property: transform, visibility, opacity;
  transition-duration: $animation_duration_base;
  transition-timing-function: easing.get(out-cubic);
  transform: translateX(100px);
  opacity: 0;
  visibility: hidden; // 1
  width: 100vw;
  height: 100vh;
  pointer-events: none;

  &.is-open {
    transform: none;
    visibility: visible;
    pointer-events: auto;
    opacity: 1;

    &::before {
      opacity: 1;
    }
  }

  // Use root timings, but with delays when animating out to reset after the
  // drawer is no longer visible.
  @at-root %animation-element {
    transition: inherit;
    transition-duration: 0s;
    transition-delay: $animation_duration_base;

    .is-open & {
      transition: inherit;
    }
  }

  // Close button (dark overlay)
  &__close-btn {
    position: absolute;
    top: $title-padding;
    right: $title-padding;
    z-index: 3;
    height: $title-size;
    width: $title-size;
    transition: inherit;
    font-size: 0;
    opacity: 0;
    transform: rotateZ(180deg);

    .is-open & {
      opacity: 1;
      transform: none;
    }

    &::before,
    &::after {
      $line-width: 3px;

      position: absolute;
      top: calc(50% - #{$line-width / 2});
      left: 0;
      width: 100%;
      height: $line-width;
      background-color: blueviolet;
      transition: transform 600ms easing.get(in-out-cubic);
      content: '';
    }

    &::before {
      transform: rotateZ(45deg);
    }

    &::after {
      transform: rotateZ(-45deg);
    }

    &:hover,
    &:focus {
      &::before {
        transform: rotateZ(225deg);
      }

      &::after {
        transition-delay: 30ms;
        transform: rotateZ(135deg);
      }
    }
    &:focus {
      outline: 1px solid aqua;
    }
  }


  &__title {
    @extend %animation-element;
    padding: $title-padding (($title-padding * 2) + $title-size) $title-padding $title-padding;
    flex: 0 0 auto;
    transform: translateY(-30px);
    opacity: 0;
    color: red;
    font: 700 #{$title-size} / 1;
    text-transform: uppercase;

    .is-open & {
      opacity: 1;
      transform: none;
      transition-delay: $animation_delay-title;
    }

    &:focus {
      outline: 0;
    }
  }

  &__top-menu {
    @extend %animation-element;
    @include font.size(48);
    overflow-x: hidden;
    overflow-y: auto;
    background-color: lime;
    transform: translateY(20px);
    opacity: 0;
    color: black;

    .is-open & {
      opacity: 1;
      transform: none;
      transition-delay: $animation_delay-menu;
    }

    > li {
      border-bottom: 1px solid rgba(#fff, 0.2);
      padding: 1rem;
    }
  }

  &__sub-menu {
    display: flex;
    flex-wrap: wrap;
    font-size: 0.6em;

    > li {
      background-color: rgba(#fff, 0.08);
      min-width: 0;
      margin: 1rem;
      overflow: hidden;
    }

    &--deep {
      display: block;
      font-size: 1em;

      > li {
        margin-top: 0;
      }
    }
  }

  &__link {
    display: table;
    color: inherit;

    &--top {
      text-transform: uppercase;
    }
  }

  &__link-text {
    display: block;
    position: relative;
    padding: 1rem;

    // Interaction indicator.
    &::before {
      position: absolute;
      left: 1rem;
      right: 1rem;
      bottom: 0.5rem;
      border-bottom: 3px solid;
      transform: scaleX(0.3);
      opacity: 0;
      transition:
        transform 250ms easing.get(out-quint),
        opacity 250ms;
      content: '';
    }

    :hover > &,
    :focus > & {
      &::before {
        transform: scaleX(1);
        opacity: 1;
        transition-duration: 250ms;
      }
    }
  }
}
