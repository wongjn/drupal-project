////
//// Main site menu.
////

.c-main-menu {
  $y-padding: 10px;
  $x-padding: 10px;

  display: flex;
  justify-content: flex-end;
  align-items: flex-start;
  position: relative;
  z-index: 400;
  line-height: 1;

  // 1. Set height to ensure wrapped elements (that are hidden) do not affect
  //    layout flow.
  // 2. Layout box is still here when collapsed. This prevents unclickable
  //    elements underneath.
  &__top-menu {
    display: flex;
    justify-content: flex-end;
    flex-wrap: wrap;
    align-items: flex-start;
    flex: 999 0 0px;
    // height: 1em; // 1
    pointer-events: none; // 2

    .is-menu-loading & {
      overflow: hidden;
    }

    // Hide all main menu items.
    //
    // 1. Hide.
    // 2. Let scale to 0 width.
    // 3. Clip any overflow from long text links that may cause scrollbars.
    &.is-compact {
      visibility: hidden; // 1
      overflow-x: hidden; // 3
      min-width: 0; // 2
    }
  }

  &__sub-menu {
    @mixin state($open: false) {
      @if $open {
        opacity: 1;
        pointer-events: auto;
        transform: none;
        z-index: 1;
      } @else {
        opacity: 0;
        pointer-events: none;
        transform: translateY(10px);
        z-index: 0;
      }
    };

    @include state;
    position: absolute;
    top: 100%;
    left: 0;
    margin-right: -9999px;
    box-shadow: 0 5px 5px rgba(0, 0, 0, 0.3);
    background-color: pink;
    min-width: 100%;
    max-width: 250px;
    transition: opacity 250ms, transform 250ms;

    // Align to right side as JS detected it would otherwise fall outside the
    // viewport.
    &.is-moved {
      left: auto;
      right: 0;
      margin-right: 0;
      margin-left: -9999px;
    }

    // Hover helper when the menu is transitioning in
    &::before {
      position: absolute;
      left: auto;
      bottom: 100%;
      width: 100%;
      height: 10px;
      content: '';
    }

    li[aria-hidden="true"] & {
      display: none;
    }

    // Open child menu animations
    li.is-open > &,
    li:hover > & {
      @include state(true);
    }
    li:focus-within > & {
      @include state(true);
    }

    @media (hover: none) {
      li:hover:not(.is-open) > & {
        @include state;
      }
    }

    .is-closed[class] & {
      @include state;
    }

    &--deep {
      top: 0;
      left: 100%;
      transform: translateX(10px);

      // Hover helper when the menu is transitioning in.
      &::before {
        top: 0;
        left: auto;
        right: 100%;
        width: 10px;
        height: 100%;
      }

      // Move to left side as JS detected it would otherwise fall outside the
      // viewport.
      &.is-moved {
        left: auto;
        right: 100%;
        transform: translateX(-10px);

        &::before {
          left: 100%;
          right: auto;
        }
      }
    }
  }

  // Sub-menu position context.
  &__item {
    position: relative;

    // Re-enable disabled pointer events from top-level menu list element.
    &--top {
      pointer-events: auto;
    }

    &--sub {
      box-shadow: 0 1px 0 0 blue inset;
    }
  }

  &__link {
    display: block;
    padding: $y-padding $x-padding;

    &.is-active-trail {
      color: #000;
    }
  }

  &__drawer {
    flex: 0 0 auto;
    align-self: center;
  }
}
