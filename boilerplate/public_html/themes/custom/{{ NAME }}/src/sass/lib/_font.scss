/**
 * @file
 * Functions and mixins related to fonts.
 */

@use 'sass:map';
@use 'sass:math';
@use 'sass:list';
@use 'layout';
@use 'unit';
@use 'viewport';

// Font families.
$_SYSTEM: -apple-system, BlinkMacSystemFont, "Segoe UI", Helvetica, Arial, sans-serif;

// List of font sizes that will have scalable custom properties
$_SIZE-PRESETS: (
  72: 30,
  60: 30,
  48: 30,
  36: 24,
  30: 24,
  24: 24,
  18: 18,
);

// Default font size.
$SIZE: 16;

// Global default line height ratio
$LINE-HEIGHT: (24 / $SIZE);

// Minimum font size for viewport scaling.
$_SIZE_MIN: 18;

/// Returns a minimum value to use for a particular font scale size.
///
/// @param {Number} $size
///   The unitless font size in pixels.
///
/// @return {Length.rem}
///   The minimum size for the given font size with rem units.
@function _scale_minimum($size) {
  @return unit.px_to_rem(
    unit.between(math.floor(($size + ($_SIZE_MIN * 16))/ 14), $_SIZE_MIN, $size)
  );
}

/// Outputs font size using fallback and variables.
///
/// @param {Number|Length.px} $size
///   The font size in pixels.
@mixin size($size) {
  $rem_size: unit.px_to_rem($size);

  // Fallback for custom properties or when size is too small to attempt to
  // scale.
  font-size: $rem_size;

  @if $size > $_SIZE_MIN {
    // Defined in body as CSS custom properties.
    @if map.has_key($_SIZE_PRESETS, $size) {
      font-size: var(--font-size-#{$size});
    }
    @else {
      font-size: viewport.scale($rem-size, _scale_minimum($size));
    }
  }
}

/// Outputs custom properties for font size presets.
@mixin size-custom-properties {
  @each $size, $min in $_SIZE_PRESETS {
    --font-size-#{$size}: #{unit.px_to_rem($min)};

    @supports (top: min(0%, 1%)) {
      --font-size-#{$size}: #{viewport.scale($size * 1px, $min * 1px)};
    }
  }
}

$_crop-font-size: 24;
$_crop-line-height: 1.5;

/// Calculates the edge difference of a font and its line-height.
///
/// @param {Number} $crop
///   The crop distance in pixels.
/// @param {Number} $line-height
///   Line height of text being cropped.
///
/// @return {Length.em}
///   Difference of the crop length, relative to line height and font size.
@function _crop_edge($crop, $line-height: 1.3) {
  @return (math.max(($crop + ($line-height - $_crop-line-height) * ($_crop-font-size / 2)), 0) / $_crop-font-size) * 1em;
}

/// Calculates the difference of line height to font cap height.
///
/// @param {Number} $line-height [1.3]
///   Line height for the text being cropped.
/// @param {String} $font ['']
///   Font family being cropped.
///
/// @return {Length.em}
///   The difference.
@function crop_top($line-height: 1.3, $font: '') {
  $crop: 10;
  @return _crop_edge($crop, $line-height);
}

/// Calculates the difference of line height to font base line.
///
/// @param {Number} $line-height [1.3]
///   Line height for the text being cropped.
/// @param {String} $font ['']
///   Font family being cropped.
///
/// @return {Length.em}
///   The difference.
@function crop_bottom($line-height: 1.3, $font: '') {
  $crop: 8;
  @return _crop_edge($crop, $line-height);
}

/// Crops a box-model to cap height and baseline of a supported font family.
///
/// @param {Number} $line-height [1.3]
///   Line height for the text being cropped.
/// @param {String} $font ['']
///   Font family being cropped.
/// @param {Length.px} $top-adjustment [0px]
///   Manual top margin adjustment.
/// @param {Length.px} $bottom-adjustment [0px]
///   Manual bottom margin adjustment.
@mixin crop($line-height: 1.3, $font: '', $top-adjustment: 0px, $bottom-adjustment: 0px) {
  // Mixin output
  line-height: $line-height;

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
    width: 0;
  }

  &::before {
    margin-bottom: calc(#{crop_top($line-height, $font) * -1} + #{$top-adjustment});
  }

  &::after {
    margin-top: calc(#{crop_bottom($line-height, $font) * -1} + #{$bottom-adjustment});
  }
}
