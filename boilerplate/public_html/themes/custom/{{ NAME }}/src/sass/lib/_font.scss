@use "sass:math";
@use "sass:list";
/**
 * @file
 * Functions and mixins related to fonts.
 */

@use 'unit';
@use 'viewport';

// List of font sizes that will have scalable custom properties
$_SIZE-PRESETS: (
  72,
  60,
  48,
  40,
  36,
  30,
  24,
  18,
  16,
);

// Minimum size for font size to be considered scalable
$_SIZE-SCALE-MINIMUM: 12px;

// Default font size
$SIZE: 16;

// Global default line height ratio
$LINE-HEIGHT: (24 / $SIZE);

/**
 * Returns the minimum value to use for font scales.
 *
 * @param {number} $size
 *   The unitless font size in pixels.
 * @return {number}
 *   The minimum size for the given font size with rem units.
 */
@function _scale-minimum($size) {
  @return unit.px-to-rem(
    unit.between(
      math.floor(($size + ($_SIZE-SCALE-MINIMUM * 16))/ 14),
      $_SIZE-SCALE-MINIMUM,
      $size * 1px
    )
  );
}

/**
 * Outputs font size using fall-back and variables.
 *
 * @param {number} $size
 *   The unitless font size in pixels.
 */
@mixin size($size) {
  $rem-size: unit.px-to-rem($size);

  // Too small to scale
  @if $size <= $_SIZE-SCALE-MINIMUM {
    font-size: $rem-size;
  }
  // Defined in :root as CSS custom properties
  @else if list.index($_SIZE-PRESETS, $size) {
    font-size: $rem-size;
    font-size: var(--font-size-#{$size});
  }
  @else {
    @include viewport.scale(font-size, $rem-size, _scale-minimum($size));
  }
}

/**
 * Outputs custom properties for font size presets.
 *
 * @param {bool} [$editor-stylesheet=false]
 *   Optional. Indicates whether the mixin is in the context of a WYSIWYG
 *   editor. Default false.
 *
 */
@mixin size-custom-properties($editor-stylesheet: false) {
  @each $size in $_SIZE-PRESETS {
    $rem-size: unit.px-to-rem($size * 1px);

    @if $size > $_SIZE-SCALE-MINIMUM {
      @if ($editor-stylesheet) {
        // No scaling for WYSIWYG editors
        --font-size-#{$size}: #{$rem-size};
      } @else {
        @include viewport.scale(--font-size-#{$size}, $rem-size, _scale-minimum($size));
      }
    }
  }
}

/**
 * Crops a box-model to cap height and baseline of a supported font family.
 */
@mixin crop($line-height: 1.3, $font-family: '', $top-adjustment: 0px, $bottom-adjustment: 0px) {
  $top-crop: 0;
  $bottom-crop: 0;
  $crop-font-size: 24;
  $crop-line-height: 1.5;

  // Apply values to calculate em-based margins that work with any font size
  $dynamic-top-crop: math.max(($top-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;
  $dynamic-bottom-crop: math.max(($bottom-crop + ($line-height - $crop-line-height) * ($crop-font-size / 2)), 0) / $crop-font-size;

  // Mixin output
  line-height: $line-height;

  &::before,
  &::after {
    content: '';
    display: block;
    height: 0;
    width: 0;
  }

  &::before {
    margin-bottom: calc(-#{$dynamic-top-crop}em + #{$top-adjustment});
  }

  &::after {
    margin-top: calc(-#{$dynamic-bottom-crop}em + #{$bottom-adjustment});
  }
}
