<?php

/**
 * @file
 * Supporting theme hooks and functions.
 */

use Drupal\Core\Template\Attribute;
use Drupal\file\FileInterface;
use Drupal\{{ NAME }}\Assets;
use Drupal\{{ NAME }}\Menu;

/**
 * Implements hook_theme().
 */
function {{ NAME }}_theme($existing, $type, $theme, $path) {
  return [
    'favicons' => [
      'variables' => [
        'path' => file_url_transform_relative(file_create_url("$path/favicons")),
        'colour' => '#123456',
      ],
    ],
  ];
}

/**
 * Implements hook_css_alter().
 */
function {{ NAME }}_css_alter(&$css) {
  /** @var \Drupal\Core\Asset\LibraryDiscovery $library_manager */
  $library_manager = \Drupal::service('library.discovery');

  $extract_files = function ($css) {
    return $css['data'];
  };
  $global_stylesheets = array_merge(
    array_map($extract_files, $library_manager->getLibraryByName('system', 'base')['css']),
    array_map($extract_files, $library_manager->getLibraryByName('{{ NAME }}', 'global')['css'])
  );

  $browser_sync = \Drupal::service('settings')->get('browsersync');
  $theme_path = drupal_get_path('theme', '{{ NAME }}');

  foreach (array_keys($css) as $location) {
    // Group global libraries into their own group.
    if (in_array($location, $global_stylesheets)) {
      $css[$location]['group'] = -2;
    }

    // Force theme CSS to use <link> tags (for BrowserSync development).
    if ($browser_sync && strpos($location, $theme_path) !== FALSE) {
      $css[$location]['preprocess'] = FALSE;
    }
  }
}

/**
 * Implements hook_js_alter().
 */
function {{ NAME }}_js_alter(&$javascript) {
  $preprocess = \Drupal::config('system.performance')->get('js.preprocess');
  $theme_path = drupal_get_path('theme', '{{ NAME }}');

  foreach ($javascript as $file_path => $options) {
    if (strpos($file_path, $theme_path) !== 0 || $options['type'] != 'file') {
      continue;
    }

    if ($preprocess) {
      // Enable long-term caching.
      $javascript[$file_path]['version'] = Assets::getHash($file_path);
    }
    else {
      $javascript[$file_path]['cache'] = FALSE;
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function {{ NAME }}_page_attachments_alter(array &$attachments) {
  // Pass theme directory to JS.
  $attachments['#attached']['drupalSettings']['{{ NAME }}']['path'] = file_url_transform_relative(
    file_create_url(drupal_get_path('theme', '{{ NAME }}'))
  );

  // Add favicons.
  Assets::attachFavicons($attachments);

  // Preload modern script.
  Assets::attachScriptPreload($attachments);

  // Preload critical fonts.
  // Assets::attachFontPreloads($attachments);
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function {{ NAME }}_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = 'l-container__module';
}

/**
 * Implements hook_preprocess_HOOK() for block--system-main-block.html.twig.
 */
function {{ NAME }}_preprocess_block__system_main_block(&$variables) {
  if (\Drupal::routeMatch()->getParameter('node')) {
    // Remove container module class from nodes; it will be added per field
    // instead. @see {{ NAME }}_preprocess_field().
    $variables['attributes'] = (new Attribute($variables['attributes']))
      ->removeClass('l-container__module')
      ->toArray();
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function {{ NAME }}_preprocess_field(&$variables) {
  $element = $variables['element'];

  // Container module class removed from system_main_block so that it can be
  // added here for consistent spacing.
  if ($element['#entity_type'] == 'node' && $element['#view_mode'] == 'full') {
    $variables['attributes']['class'][] = 'l-container__module';
  }

  if ($variables['label_display'] == 'visually_hidden') {
    $variables['title_attributes']['class'][] = 'visually-hidden';
  }
}

/**
 * Implements hook_preprocess_HOOK() for field--node--created.html.twig.
 */
function {{ NAME }}_preprocess_field__node__created(&$variables) {
  $timestamp = $variables['element']['#items']->first()->value;

  $variables['items'][0]['content'] = [
    '#theme' => 'time',
    '#timestamp' => $timestamp,
    '#text' => \Drupal::service('date.formatter')->format($timestamp, 'medium'),
  ];
}

/**
 * Implements hook_preprocess_HOOK() for file-link.html.twig.
 */
function {{ NAME }}_preprocess_file_link(&$variables) {
  $file = $variables['file'];
  $file_entity = ($file instanceof FileInterface) ? $file : \Drupal::entityTypeManager()->getStorage('file')->load($file->fid);

  // Add href attribute.
  $variables['attributes']->setAttribute('href', file_create_url($file_entity->getFileUri()));

  // Set mime type info into attribute.
  $mime_type = $file->getMimeType();
  $variables['attributes']->setAttribute('type', "$mime_type; length=" . $file->getSize());

  if (empty($variables['description'])) {
    $variables['description'] = $file_entity->getFilename();
  }
  else {
    $variables['attributes']->setAttribute('title', $file_entity->getFilename());
  }

  $variables['attributes']->setAttribute('download', TRUE);
  $variables['attributes']->setAttribute('target', '_blank');
}

/**
 * Implements hook_preprocess_HOOK() for html--imce.html.twig.
 *
 * Alters libraries attached to IMCE file manager dialog.
 */
function {{ NAME }}_preprocess_html__imce(&$variables) {
  if (!isset($variables['page']['#attached']['library'])) {
    return;
  }

  $variables['page']['#attached']['library'] = array_filter(
    $variables['page']['#attached']['library'],
    function ($library_name) {
      return strpos($library_name, '{{ NAME }}/') === FALSE;
    }
  );
  $variables['page']['#attached']['library'][] = '{{ NAME }}/imce-file-manager';
}

/**
 * Implements hook_preprocess_HOOK() for image-formatter.html.twig.
 */
function {{ NAME }}_preprocess_image_formatter(&$variables) {
  if ($variables['url']) {
    $attributes = $variables['url']->getOption('attributes') ?: [];
    $variables['link_attributes'] = new Attribute($attributes);
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function {{ NAME }}_preprocess_menu(&$variables) {
  Menu::recursiveMenuApply(
    ['\Drupal\{{ NAME }}\Menu', 'addExternalOptions'],
    $variables['items']
  );

  $variables['attributes_map'] = [
    'sub' => new Attribute(),
    'deep' => new Attribute(),
  ];
}

/**
 * Implements hook_preprocess_HOOK() for menu--main.html.twig.
 */
function {{ NAME }}_preprocess_menu__main(&$variables) {
  Menu::recursiveMenuApply(
    ['\Drupal\{{ NAME }}\Menu', 'mainMenuAddClasses'],
    $variables['items']
  );

  $variables['attributes']['class'][] = 'js-main-menu__menu';
  $variables['attributes']['class'][] = 's-main-menu__top-menu';
  $variables['attributes_map']['sub']->addClass('s-main-menu__sub-menu');
  $variables['attributes_map']['deep']->addClass([
    's-main-menu__sub-menu',
    's-main-menu__sub-menu--deep',
  ]);

  $cookies = \Drupal::request()->cookies;

  // Preset height from cookie value.
  if ($menu_height = $cookies->get('mh')) {
    $variables['attributes']['style'] = "height:${menu_height}px";
  }
  $variables['#cache']['contexts'][] = 'cookies:mh';

  $variables['drawer_attributes'] = new Attribute(['class' => ['s-main-menu__drawer']]);

  // Preset whether drawer button is shown from cookie value.
  if (!$cookies->get('md')) {
    $variables['drawer_attributes']->setAttribute('style', 'display:none');
  }
  $variables['#cache']['contexts'][] = 'cookies:md';
}

/**
 * Implements hook_preprocess_HOOK() for page-title.html.twig.
 */
function {{ NAME }}_preprocess_page_title(&$variables) {
  $variables['title_attributes']['class'][] = 'o-title';
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function {{ NAME }}_preprocess_region(&$variables) {
  $variables['attributes']['class'][] = 'l-container';
}

/**
 * Implements hook_form_alter().
 */
function {{ NAME }}_form_alter(&$form) {
  $form['#attached']['library'][] = '{{ NAME }}/form';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for contact_message_form.
 */
function {{ NAME }}_form_contact_message_form_alter(&$form) {
  $form['name']['#title'] = t('Name');
  $form['mail']['#title'] = t('Email');
  // $form['message']['widget'][0]['value']['#title'] = t('Query');

  unset($form['actions']['preview']);
  unset($form['copy']);
  unset($form['langcode']);

  $form['actions']['submit']['#value'] = t('Submit');
}

/**
 * Implements hook_element_info_alter().
 */
function {{ NAME }}_element_info_alter(array &$info) {
  $info['view']['#pre_render'][] = '{{ NAME }}_view_pre_render';
  $info['processed_text']['#pre_render'][] = '{{ NAME }}_processed_text_pre_render';
  unset($info['page']['#theme_wrappers']['off_canvas_page_wrapper']);

  // Add pre-render hook to alter module/nomodule script HTML tags.
  if (!isset($info['html_tag']['#pre_render'])) {
    $info['html_tag']['#pre_render'] = [];
  }
  array_unshift($info['html_tag']['#pre_render'], ['\Drupal\{{ NAME }}\Assets', 'preRenderHtmlTag']);
}

/**
 * Pre-render callback to wrap processed text.
 */
function {{ NAME }}_processed_text_pre_render($element) {
  $element['#theme_wrappers'][] = 'container';
  $element['#attributes']['class'][] = 'c-text-body';

  return $element;
}

/**
 * Pre-render callback to remove wrapper elements around views.
 */
function {{ NAME }}_view_pre_render($element) {
  if (isset($element['#theme_wrappers'])) {
    $key = array_search('container', $element['#theme_wrappers']);

    if (is_int($key)) {
      unset($element['#theme_wrappers'][$key]);
    }
  }

  return $element;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block.
 */
function {{ NAME }}_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $element = $variables['elements'];
  if ($element['#base_plugin_id'] == 'block_content') {
    $index = array_search('block__' . $element['#id'], $suggestions);
    // Add suggestion for block_content block type.
    array_splice($suggestions, $index, 0, 'block__block_content__' . $element['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field.
 */
function {{ NAME }}_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if ($element['#is_multiple']) {
    array_unshift($suggestions, 'field__list');
  }
}
