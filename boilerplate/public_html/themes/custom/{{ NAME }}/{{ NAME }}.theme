<?php

/**
 * @file
 * Supporting theme hooks and functions.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Template\Attribute;
use Drupal\{{ NAME }}\Assets;
use Drupal\{{ NAME }}\Menu;

/**
 * Implements hook_theme().
 */
function {{ NAME }}_theme($existing, $type, $theme, $path) {
  return [
    'favicons' => [
      'variables' => [
        'path' => file_url_transform_relative(file_create_url("$path/favicons")),
        'colour' => '#123456',
      ],
    ],
  ];
}

/**
 * Implements hook_theme_registry_alter().
 */
function {{ NAME }}_theme_registry_alter(array &$theme_registry) {
  if (isset($theme_registry['file_link'])) {
    $theme_registry['file_link']['preprocess functions'] = array_diff(
      $theme_registry['file_link']['preprocess functions'],
      ['template_preprocess_file_link']
    );
  }
}

/**
 * Implements hook_css_alter().
 */
function {{ NAME }}_css_alter(&$css) {
  /** @var \Drupal\Core\Asset\LibraryDiscovery $library_manager */
  $library_manager = \Drupal::service('library.discovery');

  $extract_files = function ($css) {
    return $css['data'];
  };
  $global_stylesheets = array_merge(
    array_map($extract_files, $library_manager->getLibraryByName('system', 'base')['css']),
    array_map($extract_files, $library_manager->getLibraryByName('{{ NAME }}', 'global')['css'])
  );

  $browser_sync = \Drupal::service('settings')->get('browsersync');
  $theme_path = drupal_get_path('theme', '{{ NAME }}');

  foreach (array_keys($css) as $location) {
    // Group global libraries into their own group.
    if (in_array($location, $global_stylesheets)) {
      $css[$location]['group'] = -2;
    }

    // Force theme CSS to use <link> tags (for BrowserSync development).
    if ($browser_sync && strpos($location, $theme_path) !== FALSE) {
      $css[$location]['preprocess'] = FALSE;
    }
  }
}

/**
 * Implements hook_js_alter().
 */
function {{ NAME }}_js_alter(&$javascript) {
  $preprocess = \Drupal::config('system.performance')->get('js.preprocess');
  $theme_path = drupal_get_path('theme', '{{ NAME }}');

  foreach ($javascript as $file_path => $options) {
    if (strpos($file_path, $theme_path) !== 0 || $options['type'] != 'file') {
      continue;
    }

    if ($preprocess) {
      // Enable long-term caching.
      $javascript[$file_path]['version'] = Assets::getHash($file_path);
    }
    else {
      $javascript[$file_path]['cache'] = FALSE;
    }
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function {{ NAME }}_page_attachments_alter(array &$attachments) {
  // Pass theme directory to JS.
  $attachments['#attached']['drupalSettings']['{{ NAME }}']['path'] = file_url_transform_relative(
    file_create_url(drupal_get_path('theme', '{{ NAME }}'))
  );

  // Add favicons.
  Assets::attachFavicons($attachments);

  // Preload modern script.
  Assets::attachScriptPreload($attachments);

  // Preload critical fonts.
  // Assets::attachFontPreloads($attachments);

  // Remove telephone number detection in Safari and Edge.
  $attachments['#attached']['html_head'][] = [
    [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'format-detection',
        'content' => 'telephone=no',
      ],
    ],
    'telephone_number_detection_off',
  ];
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function {{ NAME }}_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = 'l-container__module';
}

/**
 * Implements hook_preprocess_HOOK() for block--system-main-block.html.twig.
 */
function {{ NAME }}_preprocess_block__system_main_block(&$variables) {
  if (\Drupal::routeMatch()->getParameter('node')) {
    // Remove container module class from nodes; it will be added per field
    // instead. @see {{ NAME }}_preprocess_node().
    $variables['attributes'] = (new Attribute($variables['attributes']))
      ->removeClass('l-container__module')
      ->toArray();
  }
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 */
function {{ NAME }}_preprocess_field(&$variables) {
  if ($variables['label_display'] == 'visually_hidden') {
    $variables['title_attributes']['class'][] = 'visually-hidden';
  }
}

/**
 * Implements hook_preprocess_HOOK() for field--node--created.html.twig.
 */
function {{ NAME }}_preprocess_field__node__created(&$variables) {
  $timestamp = $variables['element']['#items']->first()->value;

  $variables['items'][0]['content'] = [
    '#theme' => 'time',
    '#timestamp' => $timestamp,
    '#text' => \Drupal::service('date.formatter')->format($timestamp, 'medium'),
  ];
}

/**
 * Implements hook_preprocess_HOOK() for file-link.html.twig.
 */
function {{ NAME }}_preprocess_file_link(&$variables) {
  /** @var \Drupal\file\FileInterface $file */
  $file = $variables['file'];

  // Add href attribute.
  $variables['attributes']['href'] = file_url_transform_relative(
    file_create_url($file->getFileUri())
  );

  // Set mime type info into attribute.
  $variables['attributes']['type'] = sprintf(
    '%s; length=%s',
    $file->getMimeType(),
    $file->getSize()
  );

  if (empty($variables['description'])) {
    $variables['description'] = $file->getFilename();
  }

  $variables['attributes']['download'] = TRUE;
  $variables['attributes']['target'] = '_blank';
}

/**
 * Implements hook_preprocess_HOOK() for html--imce.html.twig.
 *
 * Alters libraries attached to IMCE file manager dialog.
 */
function {{ NAME }}_preprocess_html__imce(&$variables) {
  if (!isset($variables['page']['#attached']['library'])) {
    return;
  }

  $variables['page']['#attached']['library'] = array_filter(
    $variables['page']['#attached']['library'],
    function ($library_name) {
      return strpos($library_name, '{{ NAME }}/') === FALSE;
    }
  );
  $variables['page']['#attached']['library'][] = '{{ NAME }}/imce-file-manager';
}

/**
 * Implements hook_preprocess_HOOK() for image-formatter.html.twig.
 */
function {{ NAME }}_preprocess_image_formatter(&$variables) {
  if ($variables['url']) {
    $attributes = $variables['url']->getOption('attributes') ?: [];
    $variables['link_attributes'] = new Attribute($attributes);
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function {{ NAME }}_preprocess_menu(&$variables) {
  Menu::recursiveMenuApply(
    ['\Drupal\{{ NAME }}\Menu', 'addExternalOptions'],
    $variables['items']
  );

  $variables['attributes_map'] = [
    'sub' => new Attribute(),
    'deep' => new Attribute(),
  ];
}

/**
 * Implements hook_preprocess_HOOK() for menu--main.html.twig.
 */
function {{ NAME }}_preprocess_menu__main(&$variables) {
  Menu::recursiveMenuApply(
    ['\Drupal\{{ NAME }}\Menu', 'mainMenuAddClasses'],
    $variables['items']
  );

  $variables['attributes']['class'][] = 'js-main-menu__menu';
  $variables['attributes']['class'][] = 'c-main-menu__top-menu';
  $variables['attributes_map']['sub']->addClass('c-main-menu__sub-menu');
  $variables['attributes_map']['deep']->addClass([
    'c-main-menu__sub-menu',
    'c-main-menu__sub-menu--deep',
  ]);

  $variables['drawer_attributes'] = new Attribute(['class' => ['c-main-menu__drawer']]);

  $cookies = \Drupal::request()->cookies;

  // Get line-break from cookie value.
  // @see src/js/main-menu/handlers/line-break.js
  if ($line_break = $cookies->get('mb')) {
    // Pre-hide menu items.
    foreach (array_slice($variables['items'], $line_break) as $item) {
      $item['attributes']->setAttribute('style', 'visibility:hidden');
    }

    if ($line_break == 1) {
      $variables['attributes']['class'][] = 'is-compact';
    }
  }
  $variables['#cache']['contexts'][] = 'cookies:mb';

  // Preset whether drawer button is shown from cookie value.
  // @see src/js/main-menu/handlers/drawer.js
  if (!$cookies->has('md')) {
    $variables['drawer_attributes']->setAttribute('style', 'display:none');
  }
  $variables['#cache']['contexts'][] = 'cookies:md';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function {{ NAME }}_preprocess_node(&$variables) {
  // Container module class removed from system_main_block so that it can be
  // added here for consistent spacing.
  if ($variables['view_mode'] == 'full') {
    foreach (Element::getVisibleChildren($variables['content']) as $key) {
      $variables['content'][$key]['#attributes']['class'][] = 'l-container__module';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for page-title.html.twig.
 */
function {{ NAME }}_preprocess_page_title(&$variables) {
  $variables['title_attributes']['class'][] = 'o-title';
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function {{ NAME }}_preprocess_region(&$variables) {
  $variables['attributes']['class'][] = 'l-container';
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for contact_message_form.
 */
function {{ NAME }}_form_contact_message_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\Display\EntityFormDisplayInterface $form_display */
  $form_display = $form_state->get('form_display');

  // Ensure base-fields have the weights they were assigned in form display
  // configuration.
  foreach (['mail', 'name', 'message'] as $base_field) {
    if ($component = $form_display->getComponent($base_field)) {
      $form[$base_field]['#weight'] = $component['weight'];
    }
  }

  $form['name']['#title'] = t('Name');
  $form['mail']['#title'] = t('Email');
  // $form['message']['widget'][0]['value']['#title'] = t('Query');

  unset($form['actions']['preview']);
  unset($form['copy']);
  unset($form['langcode']);

  $form['actions']['submit']['#value'] = t('Submit');
}

/**
 * Implements hook_element_info_alter().
 */
function {{ NAME }}_element_info_alter(array &$info) {
  $info['view']['#pre_render'][] = ['Drupal\{{ NAME }}\Render', 'preRenderViewElement'];
  $info['processed_text']['#pre_render'][] = ['Drupal\{{ NAME }}\Render', 'preRenderProcessedText'];

  // Remove unused off-canvas page wrapping markup.
  unset($info['page']['#theme_wrappers']['off_canvas_page_wrapper']);

  // Add pre-render hook to alter module/nomodule script HTML tags.
  if (!isset($info['html_tag']['#pre_render'])) {
    $info['html_tag']['#pre_render'] = [];
  }
  array_unshift($info['html_tag']['#pre_render'], ['\Drupal\{{ NAME }}\Assets', 'preRenderHtmlTag']);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block.
 */
function {{ NAME }}_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  $element = $variables['elements'];
  if ($element['#base_plugin_id'] == 'block_content') {
    $index = array_search('block__' . $element['#id'], $suggestions);
    // Add suggestion for block_content block type.
    array_splice($suggestions, $index, 0, 'block__block_content__' . $element['content']['#block_content']->bundle());
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for field.
 */
function {{ NAME }}_theme_suggestions_field_alter(array &$suggestions, array $variables) {
  $element = $variables['element'];
  if ($element['#is_multiple']) {
    array_unshift($suggestions, 'field__list');
  }
}
