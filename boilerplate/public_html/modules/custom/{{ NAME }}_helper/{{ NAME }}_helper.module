<?php

/**
 * @file
 * {{ LABEL }} helper module.
 */

use Drupal\imce\Imce;

/**
 * Implements hook_editor_js_settings_alter().
 */
function {{ NAME }}_helper_editor_js_settings_alter(array &$settings) {
  foreach (array_keys($settings['editor']['formats']) as $format) {
    if ($settings['editor']['formats'][$format]['editor'] == 'ckeditor') {
      $settings['editor']['formats'][$format]['editorSettings']['bodyClass'] = 'c-text-body c-text-body--editor';
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for views-view.html.twig.
 */
function {{ NAME }}_helper_preprocess_views_view(&$variables) {
  $extenders = $variables['view']->display_handler->getExtenders();

  if (isset($extenders['inview'])) {
    $extenders['inview']->preprocessViewsView($variables);
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for block_content_form.
 */
function {{ NAME }}_helper_form_block_content_form_alter(array &$form) {
  // Hide block_content block description field from those who cannot administer
  // blocks since they may assume this is the block title.
  $form['info']['#access'] = \Drupal::currentUser()->hasPermission('administer blocks');
}

/**
 * Implements hook_menu_links_discovered_alter().
 */
function {{ NAME }}_helper_menu_links_discovered_alter(&$links) {
  $editable_menus = [
    'footer',
    'main',
  ];

  // Remove static module-defined menu links on front-end, editable menus to
  // avoid conflicts with menu overrides config syncing.
  foreach ($links as $key => $link) {
    if (
      strpos($key, 'menu_link_content:') === FALSE &&
      isset($link['menu_name']) && in_array($link['menu_name'], $editable_menus)
    ) {
      unset($links[$key]);
    }
  }
}

/**
 * Implements hook_library_info_alter().
 */
function {{ NAME }}_helper_library_info_alter(&$libraries, $extension) {
  if (\Drupal::theme()->getActiveTheme()->getName() === 'seven') {
    $path = drupal_get_path('module', '{{ NAME }}_helper');

    switch ($extension) {
      case 'imce':
        $libraries['drupal.imce.input']['css']['component'] = ["/$path/css/imce/components/input.css" => []];
        break;

      case 'paragraphs':
        $libraries['drupal.paragraphs.widget']['css']['theme']["/$path/css/paragraphs/theme/widget.css"] = [];
        $libraries['paragraphs-dragdrop']['css']['theme']["/$path/css/paragraphs/theme/dragdrop.css"] = [];
        break;

      case 'seven':
        $libraries['global-styling']['css']['component']["/$path/css/seven/components/form.css"] = [];
        break;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for editor_link_dialog form.
 */
function {{ NAME }}_helper_form_editor_link_dialog_alter(&$form) {
  {{ NAME }}_helper_imce_url_input_alter($form['attributes']['href']);
}

/**
 * Implements hook_form_FORM_ID_alter() for editor_image_dialog form.
 */
function {{ NAME }}_helper_form_editor_image_dialog_alter(&$form) {
  {{ NAME }}_helper_imce_url_input_alter($form['attributes']['src']);
}

/**
 * Processes IMCE URL elements for styling.
 *
 * @param array $element
 *   The URL input element.
 */
function {{ NAME }}_helper_imce_url_input_alter(array &$element) {
  if (\Drupal::moduleHandler()->moduleExists('imce') && Imce::access()) {
    $element['#label_attributes']['class'][] = 'imce-url-label';
  }
}

/**
 * Implements hook_block_alter().
 */
function {{ NAME }}_helper_block_alter(&$definitions) {
  $form_blocks = [
    'search_form_block',
    'views_exposed_filter_block',
  ];

  foreach ($definitions as $id => $definition) {
    // Overrides core class to override ::build() method to prevent form
    // attributes being applied to block element instead of <form>.
    // @todo Remove once https://www.drupal.org/project/drupal/issues/2486267 is
    //   resolved.
    if (in_array($definition['id'], $form_blocks)) {
      $definitions[$id]['original_class'] = $definitions[$id]['class'];
      $definitions[$id]['class'] = 'Drupal\{{ NAME }}_helper\Plugin\Block\FormWrapperFixBlock';
    }
  }
}
